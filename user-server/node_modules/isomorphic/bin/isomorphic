#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2));
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');

var fs = require('fs');
var spawn = require('child_process').spawn;
var chalk = require('chalk');

var pkg = require('./../package.json');

var validCommands = {
  NEW: 'new',
  SERVER: 'server',
  BUILD: 'build',
  GULP: 'gulp',
  HELP: 'help',
  VERSION: 'version'
}

// @TODO some basic tracking
// var Insight = require('insight');
// var insight = new Insight({
//   // Google Analytics tracking code
//   trackingCode: pkg.tracking,
//   packageName: pkg.name,
//   packageVersion: pkg.version
// });

// if (insight.optOut === undefined) {
//   return insight.askPermission(null, function (err, optOut) {
//     init(optOut);
//   });
// } else {
//   init(insight.optOut)
// }
// if (!optOut) {
//   insight.track('IsomorphicCLI', 'init');
// }

var Environment, environment;
function init () {
  switch (args._[0]) {
    case validCommands.NEW:
      createApplicationAt(args._[1], args.todo);
      break;
    case validCommands.SERVER:
    case validCommands.BUILD:
      Environment = require('./../lib/environment');
      environment = new Environment();
    case validCommands.SERVER:
      validEnvironment(function (settings) {
        spawn(validCommands.GULP, gulpArgs(validCommands.SERVER, settings), { stdio:'inherit' });
      });
      break;
    case validCommands.BUILD:
      validEnvironment(function (settings) {
        spawn(validCommands.GULP, gulpArgs(validCommands.BUILD, settings), { stdio: 'inherit' });
      });
      break;
    case validCommands.GULP:
      var additional = args._[1] && args._[1] !== validCommands.SERVER ? [args._[1]] : [];
      spawn(validCommands.GULP, additional, { stdio:'inherit' });
      break;
    case validCommands.HELP:
      printHelp();
      break;
    case validCommands.VERSION:
      console.log(chalk.cyan('isomorphic version', pkg.version));
      break;
    default:
      console.log(chalk.red('Please enter a valid argument.'));
      printHelp();
  }
}

function printHelp () {
  console.log(chalk.cyan('isomorphic new <app-name> <options...>'));
  console.log(chalk.cyan('  --todo (Default: false)'));
  console.log(chalk.gray('  --crud (Default: false)'));
  console.log(chalk.gray('  --bower (Default: false)'));
  console.log(chalk.gray('isomorphic init <app-name>'));
  console.log(chalk.cyan('isomorphic server'));
  console.log(chalk.cyan('  --environment (Default: development)'));
  console.log(chalk.cyan('isomorphic build'));
  console.log(chalk.cyan('  --environment (Default: development)'));
  console.log(chalk.cyan('isomorphic gulp <task>'));
  console.log(chalk.gray('isomorphic generate <type> <name>'));
  console.log(chalk.cyan('isomorphic help <name>'));
  console.log(chalk.gray('isomorphic test'));
  console.log(chalk.cyan('isomorphic version'));
}

function validEnvironment (callback) {
  if (environment.all[args.environment] || !args.environment) {
    environment.activate(args.environment || environment.DEFAULT_ENVIRONMENT);
    callback(environment.active);
  } else {
    console.log(chalk.red('Please enter a valid environment.'));
  }
}

function gulpArgs (command) {
  var gulpArgs = [command];
  for (var key in environment.active) {
    if (environment.active.hasOwnProperty(key)) {
      if (typeof environment.active[key] === 'string') {
        gulpArgs.push('--' + key + '=' + environment.active[key]);
      } else {
        gulpArgs.push('--' + key);
      }
    }
  }
  return gulpArgs;
}

/**
 * Create new isomorphic application
 *
 * @param {String} location
 */
function createApplicationAt (target, todoExample) {
  if (target) {
    target = path.join(process.cwd(), target);
    emptyDirectory(target, function (empty) {
      if (empty) {
        installApplicationAt(target, todoExample);
      } else {
        console.log(target + ' already exists.')
      }
    });
  } else {
    console.log('Must name application.')
  }
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory (path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && err.code != 'ENOENT') {
      throw err;
    }
    fn(!files || !files.length);
  });
}

/**
 * Copies files from blueprint to new application path.
 *
 * @param {String} destination
 */
function installApplicationAt (destination, todoExample) {
  var appName = path.basename(path.resolve(destination));
  process.on('exit', function(){
      console.log(chalk.yellow.bold('cd', appName, '&& npm install'));
  })

  mkdir(appName, function () {
    copy('/../blueprint/base/gulpfile.js', appName + '/gulpfile.js');
    copy('/../blueprint/base/index.html', appName + '/index.html');
    copy('/../blueprint/base/package.json', appName + '/package.json');
    copy('/../blueprint/base/server.js', appName + '/server.js');
    copy('/../blueprint/base/gitignore', appName + '/.gitignore');

    mkdir(appName + '/app', function () {
      copy('/../blueprint/base/app/client.js', appName + '/app/client.js');
      mkdir(appName + '/app/dispatcher', function () {
        copy('/../blueprint/base/app/dispatcher/app-dispatcher.js', appName + '/app/dispatcher/app-dispatcher.js');
      });

      if (todoExample) {
        todoApplication(appName);
      } else {
        baseApplication(appName);
      }
    });

    mkdir(appName + '/assets', function () {
      if (todoExample) {
        copyRecursiveSync(__dirname + '/../blueprint/todo-example/assets', appName + '/assets');
      } else {
        mkdir(appName + '/assets/images');
        mkdir(appName + '/assets/stylesheets', function () {
          mkdir(appName + '/assets/stylesheets/critical');
          copy('/../blueprint/base/assets/stylesheets/isomorphic.styl', appName + '/assets/stylesheets/isomorphic.styl');
        });
      }
    });
  });
}

function baseApplication (appName) {
  copy('/../blueprint/base/environment.json', appName + '/environment.json');
  copy('/../blueprint/base/app/router.js', appName + '/app/router.js');
  mkdir(appName + '/app/actions');
  mkdir(appName + '/app/components', function () {
    copy('/../blueprint/base/app/components/index.jsx', appName + '/app/components/index.jsx');
  });
  mkdir(appName + '/app/constants');
  mkdir(appName + '/app/routes');
  mkdir(appName + '/app/services');
  mkdir(appName + '/app/stores');
}

function todoApplication (appName) {
  copy('/../blueprint/todo-example/environment.json', appName + '/environment.json');
  copy('/../blueprint/todo-example/app/router.js', appName + '/app/router.js');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/actions', appName + '/app/actions');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/components', appName + '/app/components');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/constants', appName + '/app/constants');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/routes', appName + '/app/routes');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/services', appName + '/app/services');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/app/stores', appName + '/app/stores');
  copyRecursiveSync(__dirname + '/../blueprint/todo-example/todomvc-common', appName + '/todomvc-common');
}

function copy(from, to) {
  from = path.join(__dirname, from);
  write(from, to);
}

function copyRecursiveSync (src, dest) {
  var exists = fs.existsSync(src);
  var stats = exists && fs.statSync(src);
  var isDirectory = exists && stats.isDirectory();
  if (exists && isDirectory) {
    if (!fs.existsSync(dest)) {
      mkdir(dest, function () {
        fs.readdirSync(src).forEach(function(childItemName) {
          copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName));
        });
      });
    } else {
      fs.readdirSync(src).forEach(function(childItemName) {
        copyRecursiveSync(path.join(src, childItemName), path.join(dest, childItemName));
      });
    }
  } else {
    write(src, dest);
  }
}

function write (src, dest) {
  var inStr = fs.createReadStream(src);
  var outStr = fs.createWriteStream(dest);
  inStr.pipe(outStr);
  console.log(chalk.green('create file:', dest))
}

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log(chalk.cyan('create directory:', path))
    fn && fn();
  });
}

init();
